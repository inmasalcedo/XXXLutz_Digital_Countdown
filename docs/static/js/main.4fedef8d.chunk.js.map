{"version":3,"sources":["Components/DateBox/index.js","App.js","i18n.js","serviceWorker.js","index.js"],"names":["DateBox","_this$props","this","props","days","textdays","hours","texthours","minutes","textminutes","seconds","textseconds","react_default","a","createElement","className","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentTime","years","months","_this2","deadline","Date","getTime","setInterval","now","t","datayears","Math","floor","datamonths","datadays","datahours","datamins","datasecs","setState","_this$state","Components_DateBox","withTranslation","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","Boolean","window","location","hostname","match","i18next","lng","resources","en","common","common_en","es","common_es","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kgBAgBeA,gMAXF,IAAAC,EACoFC,KAAKC,MAAtFC,EADHH,EACGG,KAAMC,EADTJ,EACSI,SAAUC,EADnBL,EACmBK,MAAOC,EAD1BN,EAC0BM,UAAWC,EADrCP,EACqCO,QAASC,EAD9CR,EAC8CQ,YAAaC,EAD3DT,EAC2DS,QAASC,EADpEV,EACoEU,YACzE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBX,EAAME,EAAOE,EAASE,GACvDE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBV,EAAUE,EAAWE,EAAaE,WANvDK,sBCChBC,cACJ,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KACDqB,MAAQ,CACXC,YAAa,EACbC,MAAO,EACPC,OAAQ,EACRvB,KAAM,EACNE,MAAO,EACPE,QAAS,EACTE,QAAS,GATMQ,mFAaC,IAAAU,EAAA1B,KACd2B,EAAW,IAAIC,KAAK,8BAA8BC,UACtDC,YAAY,WACV,IAAIC,GAAM,IAAIH,MAAOC,UACjBG,EAAIL,EAAWI,EACnB,GAAIC,GAAK,EAAG,CACV,IAAIC,EAAYC,KAAKC,MAAMH,EAAC,SACxBI,EAAaF,KAAKC,MAAMH,EAAC,QACzBK,EAAWH,KAAKC,MAAMH,EAAC,OACvBM,EAAYJ,KAAKC,MAAOH,EAAC,MAAF,MACvBO,EAAWL,KAAKC,MAAOH,EAAC,KAAF,KACtBQ,EAAWN,KAAKC,MAAOH,EAAC,IAAkB,KAU9C,OATAN,EAAKe,SAAS,CACZlB,YAAaQ,EACbP,MAAOS,EACPR,OAAQW,EACRlC,KAAMmC,EACNjC,MAAOkC,EACPhC,QAASiC,EACT/B,QAASgC,IAEJ,CACLtC,KAAMmC,EACNjC,MAAOkC,EACPhC,QAASiC,EACT/B,QAASgC,uCAOR,IAAAE,EACoC1C,KAAKsB,MAAxCpB,EADDwC,EACCxC,KAAME,EADPsC,EACOtC,MAAOE,EADdoC,EACcpC,QAASE,EADvBkC,EACuBlC,QACtBwB,EAAMhC,KAAKC,MAAX+B,EACR,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAChBH,EAAAC,EAAAC,cAAA,UAAMoB,EAAE,eAEVtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBACdH,EAAAC,EAAAC,cAAC+B,EAAD,CAASzC,KAAMA,EAAMC,SAAU6B,EAAE,UACjCtB,EAAAC,EAAAC,cAAC+B,EAAD,CAASvC,MAAOA,EAAOC,UAAW2B,EAAE,WACpCtB,EAAAC,EAAAC,cAAC+B,EAAD,CAASrC,QAASA,EAASC,YAAayB,EAAE,aAC1CtB,EAAAC,EAAAC,cAAC+B,EAAD,CAASnC,QAASA,EAASC,YAAauB,EAAE,sBA1DlClB,aAiEH8B,cAAgB,SAAhBA,CAA0B7B,6CChEzC8B,IACGC,IAAIC,KAEJD,IAAIE,KAEJF,IAAIG,KAEJC,KAAK,CACJC,YAAa,KACbC,OAAO,EAEPC,cAAe,CACbC,aAAa,KAKJT,QAAf,ECXoBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECRNC,EAAQV,KAAK,CACXG,cAAe,CAAEC,aAAa,GAC9BO,IAAK,KACLC,UAAW,CACTC,GAAI,CACFC,OAAQC,GAEVC,GAAI,CACFF,OAAQG,MAKdC,IAASC,OACP3D,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAiBrB,KAAMe,GACrBlD,EAAAC,EAAAC,cAAC0D,EAAD,OAGFC,SAASC,eAAe,SDqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4fedef8d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport propTypes from \"prop-types\";\nimport \"./DateBox.scss\";\n\nclass DateBox extends Component {\n    render() { \n        const { days, textdays, hours, texthours, minutes, textminutes, seconds, textseconds } = this.props;\n        return ( \n            <div className=\"dateBox--container\">\n            <h2 className=\"dateBox--number\">{days}{hours}{minutes}{seconds}</h2>\n            <h2 className=\"dateBox--text\">{textdays}{texthours}{textminutes}{textseconds}</h2>\n            </div>\n         );\n    }\n}\n \nexport default DateBox;\n\nDateBox.propTypes = {\n    days: propTypes.number,\n    textdays: propTypes.string,\n    hours: propTypes.number,\n    texthours: propTypes.string, \n    minutes: propTypes.number,\n    textminutes: propTypes.string,\n    seconds: propTypes.number, \n    textseconds: propTypes.string\n}","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport DateBox from \"./Components/DateBox\";\nimport { withTranslation } from 'react-i18next';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTime: 0,\n      years: 0,\n      months: 0,\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n\n  componentDidMount() {\n    let deadline = new Date(\"December 25, 2019 12:00:00\").getTime();\n    setInterval(() => {\n      let now = new Date().getTime();\n      let t = deadline - now;\n      if (t >= 0) {\n        let datayears = Math.floor(t / (1000 * 60 * 60 * 24 * 30 * 12));\n        let datamonths = Math.floor(t / (1000 * 60 * 60 * 24 * 30));\n        let datadays = Math.floor(t / (1000 * 60 * 60 * 24));\n        let datahours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let datamins = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n        let datasecs = Math.floor((t % (1000 * 60)) / 1000); \n        this.setState({\n          currentTime: now,\n          years: datayears,\n          months: datamonths,\n          days: datadays,\n          hours: datahours,\n          minutes: datamins,\n          seconds: datasecs,\n        });   \n        return {\n          days: datadays,\n          hours: datahours,\n          minutes: datamins,\n          seconds: datasecs,\n        }\n      } else {\n      }\n    });   \n  };\n\n  render() {\n    const { days, hours, minutes, seconds, } = this.state;\n    const { t } = this.props;\n    return (\n      <div className=\"app\">\n        <header className=\"header--container\">\n          <h1>{ t('Countdown') }</h1>\n        </header>\n        <main className=\"main--container\">\n          <DateBox days={days} textdays={t(\"Days\")}/>\n          <DateBox hours={hours} texthours={t(\"Hours\")}/>\n          <DateBox minutes={minutes} textminutes={t(\"Minutes\")}/>\n          <DateBox seconds={seconds} textseconds={t(\"Seconds\")}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation('common')(App);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  .use(Backend)\n\n  .use(LanguageDetector)\n\n  .use(initReactI18next)\n \n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, \n    }\n  });\n\n\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport i18next from \"./i18n\";\nimport { I18nextProvider } from \"react-i18next\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport common_es from \"./Translations/es/common.json\";\nimport common_en from \"./Translations/en/common.json\";\n\ni18next.init({\n  interpolation: { escapeValue: false }, // React already does escaping\n  lng: \"en\", // language to use\n  resources: {\n    en: {\n      common: common_en // 'common' is our custom namespace\n    },\n    es: {\n      common: common_es\n    }\n  }\n});\n\nReactDOM.render(\n  <I18nextProvider i18n={i18next}>\n    <App />\n  </I18nextProvider>,\n\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}